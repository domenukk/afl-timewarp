
include ../../shared/MakefileDefinitions


# For this lab, exercises must by compilable flexibly with a number of different
# security mechanisms and/or options controlling the difficulty of the exercise
# enabled or disabled.
# This Makefile provides a unified interface to that.
# By default, all security mechanisms are turned on, and they must be explicitly
# disabled for individual exercises.
# The available options are:
# - EXECVE (default: true). The server will do fork() and then execve() the actual
#   exercise binary. This implies that the stack canary as well as the loading
#   positions of the stack and the libc (and possibly the main binary) will be
#   rerandomized for every connection.
#   From a building point of view, this means that the exercise must be compiled
#   as a separate binary.
#   If set to "false", the handle_client() function will be embedded in the server
#   binary and called directly from there.
# - CANARY (default: true). Embed stack canaries into the binary's stack.
# - NX (default: true). Mark the stack and data sections as non-executable.
# - FORTIFY (default: true). Use GCC's FORTIFY_SOURCE which replaces several standard
#   functions like gets(), printf() and so with versions that are somewhat hardened
#   against typical bugs.
# - DUP2 (default: false). Redirect standard input, output and error to the network connection.
# - PRINT_FLAG (default: false). Provide the print_flag() method.
# - PIE (default: true). Compile the exercise as a position independent executable.
# - RELRO (default: true). Compile the binary with _full_ RELRO (make GOT non-writable). If false, the GOT will most likely be writable.

###########################################
### Parse arguments and establish defaults.
###########################################
ifndef EXECVE
	EXECVE:=true
endif
ifeq ($(filter true false,$(EXECVE)),)
    $(error bad value for EXECVE: "$(EXECVE)")
endif
ifndef CANARY
	CANARY:=true
endif
ifeq ($(filter true false,$(CANARY)),)
    $(error bad value for CANARY: "$(CANARY)")
endif
ifndef NX
	NX:=true
endif
ifeq ($(filter true false,$(NX)),)
    $(error bad value for NX: "$(NX)")
endif
ifndef FORTIFY
    FORTIFY:=true
endif
ifeq ($(filter true false,$(FORTIFY)),)
    $(error bad value for FORTIFY: "$(FORTIFY)")
endif
ifndef DUP2
    DUP2:=false
endif
ifndef RELRO
    RELRO:=true
endif
ifeq ($(filter true false,$(DUP2)),)
    $(error bad value for DUP2: "$(DUP2)")
endif
ifndef PRINT_FLAG
    PRINT_FLAG:=false
endif
ifeq ($(filter true false,$(PRINT_FLAG)),)
    $(error bad value for PRINT_FLAG: "$(PRINT_FLAG)")
endif
ifndef PIE
    PIE:=true
endif
ifeq ($(filter true false, $(PIE)),)
    $(error bad value for PIE: "$(PIE)")
endif
ifeq ($(filter true false, $(RELRO)),)
    $(error bad value for RELRO: "$(RELRO)")
endif



########################################
# apply arguments.
########################################

ifeq ($(EXECVE), true)
    TARGETS:=server handler
    SERVER_OBJECTS:= $(SERVER_OBJECTS) server.o tools.o
    HANDLER_OBJECTS:=$(HANDLER_OBJECTS) wrapper.o exercise.o tools.o
    WRAPPER_COMPILE_CONFIG:=$(WRAPPER_COMPILE_CONFIG) -DEXECVE
else
    TARGETS:=server
    SERVER_COMPILE_CONFIG:=$(SERVER_COMPILE_CONFIG) -DNO_EXECVE
    SERVER_OBJECTS:= $(SERVER_OBJECTS) server.o tools.o wrapper.o exercise.o
endif


ifeq ($(CANARY), false)
    EXERCISE_COMPILE_CONFIG:=$(EXERCISE_COMPILE_CONFIG) $(NO_CANARY)
endif

ifeq ($(NX), false)
    ifeq ($(EXECVE), true)
        HANDLER_LINK_CONFIG:=$(HANDLER_LINK_CONFIG) $(NO_NX)
    else
        SERVER_LINK_CONFIG:=$(SERVER_LINK_CONFIG) $(NO_NX)
    endif
endif

ifeq ($(FORTIFY), false)
    EXERCISE_COMPILE_CONFIG:=$(EXERCISE_COMPILE_CONFIG) $(NO_FORTIFY)
endif

ifeq ($(DUP2), true)
    WRAPPER_COMPILE_CONFIG:=$(WRAPPER_COMPILE_CONFIG) $(DO_DUP2)
    ifeq ($(PRINT_FLAG), true)
        PRINT_FLAG_COMPILE_CONFIG:=$(PRINT_FLAG_COMPILE_CONFIG) $(DO_DUP2)
    endif
endif


ifeq ($(PRINT_FLAG), true)
    ifeq ($(EXECVE), true)
        HANDLER_OBJECTS:=$(HANDLER_OBJECTS) print_flag.o
    else
        SERVER_OBJECTS:=$(SERVER_OBJECTS) print_flag.o
    endif
endif

ifeq ($(PIE), true)
    SERVER_COMPILE_CONFIG:=$(SERVER_COMPILE_CONFIG) $(COMPILE_TO_PIE)
    WRAPPER_COMPILE_CONFIG:=$(WRAPPER_COMPILE_CONFIG) $(COMPILE_TO_PIE)
    EXERCISE_COMPILE_CONFIG:=$(EXERCISE_COMPILE_CONFIG) $(COMPILE_TO_PIE)
    TOOLS_COMPILE_CONFIG:=$(TOOLS_COMPILE_CONFIG) $(COMPILE_TO_PIE)
    PRINT_FLAG_COMPILE_CONFIG:=$(PRINT_FLAG_COMPILE_CONFIG) $(COMPILE_TO_PIE)
    SERVER_LINK_CONFIG:=$(SERVER_LINK_CONFIG) $(LINK_TO_PIE)
    ifeq ($(EXECVE), true)
        HANDLER_LINK_CONFIG:=$(HANDLER_LINK_CONFIG) $(LINK_TO_PIE)
    endif
endif

ifeq ($(RELRO), true)
    SHARED_LINK_CONFIG := $(SHARED_LINK_CONFIG) -z relro -z now
endif	




####################################
### recipes
####################################

# for the capabilities needed to switch to a new network namespace
SERVER_LIBS := $(SERVER_LIBS) -lcap

all: build
build: $(TARGETS)

server: $(SERVER_OBJECTS)
	$(CC) $(CFLAGS) $(SHARED_LINK_CONFIG) $(SERVER_LINK_CONFIG) -o $@ $(SERVER_OBJECTS) $(SERVER_LIBS)

ifeq ($(EXECVE), true)
handler: $(HANDLER_OBJECTS)
	$(CC) $(CFLAGS) $(SHARED_LINK_CONFIG) $(HANDLER_LINK_CONFIG) -o $@ $(HANDLER_OBJECTS) $(HANDLER_LIBS)
endif

server.o: ../../shared/plaintext_server/server.c
	$(CC) $(CFLAGS) $(COMPILE_ONLY) $(SHARED_COMPILE_CONFIG) $(SERVER_COMPILE_CONFIG) -o $@ $<

wrapper.o: ../../shared/plaintext_server/wrapper.c 
	$(CC) $(CFLAGS) $(COMPILE_ONLY) $(SHARED_COMPILE_CONFIG) $(WRAPPER_COMPILE_CONFIG) -o $@ $<
	
exercise.o: $(EXERCISE_C_FILE)
	$(CC) $(CFLAGS) $(COMPILE_ONLY) $(SHARED_COMPILE_CONFIG) $(EXERCISE_COMPILE_CONFIG) -o $@ $(EXERCISE_C_FILE)

tools.o: ../../shared/plaintext_server/tools.c
	$(CC) $(CFLAGS) $(COMPILE_ONLY) $(SHARED_COMPILE_CONFIG) $(TOOLS_COMPILE_CONFIG) -o $@ $<

print_flag.o: ../../shared/plaintext_server/print_flag.c
	$(CC) $(CFLAGS) $(COMPILE_ONLY) $(SHARED_COMPILE_CONFIG) $(PRINT_FLAG_COMPILE_CONFIG) -o $@ $<

clean:
	rm -f *.o $(TARGETS)

